---
#
# Copyright (c) 2019 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to bring up Kubernetes and essential flockcservices required
#   initial controller unlock.
#

- block:
  - name: Set facts for IP address provisioning against loopback interface
    set_fact:
      mgmt_virtual: "{{ derived_network_params.controller_0_address }}/{{ management_subnet_prefix }}"
      cluster_virtual: "{{ controller_0_cluster_host }}/{{ cluster_subnet_prefix }}"
      pxe_virtual: "{{ derived_network_params.controller_pxeboot_floating_address }}/{{ pxe_subnet_prefix }}"
      cluster_floating_virtual: "{{ cluster_floating_address }}/{{ cluster_subnet_prefix }}"
      mgmt_floating_virtual: "{{ derived_network_params.controller_floating_address }}/{{ management_subnet_prefix }}"
      mgmt_nfs_1_virtual: "{{ derived_network_params.nfs_management_address_1 }}/{{ management_subnet_prefix }}"
      mgmt_nfs_2_virtual: "{{ derived_network_params.nfs_management_address_2 }}/{{ management_subnet_prefix }}"

  - name: Add loopback interface
   # Had to resort to shell module as source is an internal shell command
    shell: "{{ item }}"
    with_items:
      - source /etc/platform/openrc; system host-if-add controller-0 lo virtual -c platform --networks mgmt -m 1500
      - source /etc/platform/openrc; system host-if-modify controller-0 -c platform --networks cluster-host lo
      - "ip addr add {{ cluster_virtual }}  brd {{ cluster_broadcast }} dev lo scope host label lo:5"
      - "ip addr add {{ mgmt_virtual }} brd {{ management_broadcast }} dev lo scope host label lo:1"
      - "ip addr add {{ pxe_virtual }} dev lo scope host"
      - "ip addr add {{ cluster_floating_virtual }} dev lo scope host"
      - "ip addr add {{ mgmt_floating_virtual }} dev lo scope host"
      - "ip addr add {{ mgmt_nfs_1_virtual }} dev lo scope host"
      - "ip addr add {{ mgmt_nfs_2_virtual }} dev lo scope host" 

  - name: Refresh local DNS (i.e. /etc/hosts)
    lineinfile:
      path: /etc/hosts
      regex: ^((?!HEADER|127.0.0.1).)*$
      state: absent

  - name: Update local DNS
    lineinfile:
      path: /etc/hosts
      line: "{{ item }}"
    with_items:
      - "{{ derived_network_params.controller_floating_address }}\tcontroller"
      # May not need this entry
      - "{{ controller_0_cluster_host }}\tcontroller-0-infra"
      - "{{ derived_network_params.controller_pxeboot_floating_address }}\tpxecontroller"
      - "{{ external_oam_floating_address }}\toamcontroller"
      - "{{ derived_network_params.nfs_management_address_1 }}\tcontroller-platform-nfs"
      - "{{ derived_network_params.controller_1_address }}\tcontroller-1"
      - "{{ derived_network_params.controller_0_address }}\tcontroller-0"
      # May not need this entry
      - "{{ controller_1_cluster_host }}\tcontroller-1-infra"
      - "{{ derived_network_params.nfs_management_address_2 }}\tcontroller-nfs"
      # May not need this entry
      - "{{ storage_0 }}\tstorage-0"

  - name: Save hosts file to permanent location
    copy:
      src: /etc/hosts
      dest: "{{ config_permdir }}"
      remote_src: yes

  # Load images from archives if configured
  - block: # Loading of system images
    - name: Set default directory for images file copy
      set_fact:
        images_dir: /home/wrsroot
      when: (images_dir is not defined) or (images_dir is none)

    - name: Copy Docker images to remote host
      copy:
        src: "{{ docker_images_archive_source }}"
        dest: "{{ images_dir }}"
      when: inventory_hostname != 'localhost'

    - name: Adjust the images directory fact for local host
      set_fact:
        images_dir: "{{ docker_images_archive_source }}"
      when: inventory_hostname == 'localhost'

    - name: Get list of archived files
      find:
        paths: "{{ images_dir }}"
        patterns: "*.tar"
      register: archive_find_output
      #run_once: true
      #delegate_to: localhost

    - name: Load system images
      # Due to docker_image module deficiency, resort to shell
      shell: docker load < {{ images_dir }}/{{ item.path | basename }}
      with_items: "{{ archive_find_output.files }}"

    when: images_archive_exists

  - name: Bring up Kubernetes master
    include: bringup_kubemaster.yml

  # Helm should be brough up by Kubernetes upon replay
  - name: Bring up Helm
    include: bringup_helm.yml

  - name: Bring up essential flock services
    include: bringup_flock_services.yml

  # Not sure if the following tasks are necessary
  - name: Set dnsmasq.leases flag for unlock
    file:
      path: "{{ config_permdir }}/dnsmasq.leases"
      state: touch
 
  - name: Update resolv.conf file for unlock
    lineinfile:
      path: /etc/resolv.conf
      line: "nameserver {{ derived_network_params.controller_floating_address }}"
      insertbefore: BOF

  when: (not replayed) or (network_config_update) or (docker_config_update)


- block:
  - name: Remove config file from previous play
    file:
      path: /tmp/last_bootstrap_config.yml
      state: absent

  - name: Save the current system and network config for reference in subsequent replays
    lineinfile:
      # This file should be cleared upon host reboot
      path: /tmp/last_bootstrap_config.yml
      line: "{{ item }}"
      create: yes
    with_items:
      - "prev_system_mode: {{ system_mode }}"
      - "prev_timezone: {{ timezone }}"
      - "prev_vswitch_type: {{ vswitch_type }}"
      - "prev_dynamic_address_allocation: {{ dynamic_address_allocation }}"
      - "prev_pxeboot_subnet: {{ pxeboot_subnet }}"
      - "prev_management_subnet: {{ management_subnet }}"
      - "prev_cluster_subnet: {{ cluster_subnet }}"
      - "prev_external_oam_subnet: {{ external_oam_subnet }}"
      - "prev_external_oam_gateway_address: {{ external_oam_gateway_address }}"
      - "prev_external_oam_floating_address: {{ external_oam_floating_address }}"
      - "prev_management_multicast_subnet: {{ management_multicast_subnet }}"
      - "prev_dns_servers: {{ dns_servers | join(',') }}"
      - "prev_docker_registries: {{ docker_registries | join(',') }}"
      - "prev_docker_http_proxy: {{ docker_http_proxy }}"
      - "prev_docker_https_proxy: {{ docker_https_proxy }}"
      - "prev_docker_no_proxy: {{ docker_no_proxy | join(',') }}"
      - "prev_admin_username: {{ username | hash('sha1') }}"
      - "prev_admin_password: {{ password | hash('sha1') }}"
  when: save_config
